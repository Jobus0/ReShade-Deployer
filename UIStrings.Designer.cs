//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReShadeDeployer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class UIStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal UIStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ReShadeDeployer.UIStrings", typeof(UIStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Addon Support.
        /// </summary>
        public static string Addon {
            get {
                return ResourceManager.GetString("Addon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable this if you plan to install a ReShade addon to the game..
        /// </summary>
        public static string Addon_Tooltip {
            get {
                return ResourceManager.GetString("Addon_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReShade website (https://reshade.me) is down or the connection was blocked..
        /// </summary>
        public static string ConnectionError {
            get {
                return ResourceManager.GetString("ConnectionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Context Menu Deploy.
        /// </summary>
        public static string ContextMenuDeploy {
            get {
                return ResourceManager.GetString("ContextMenuDeploy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a &apos;Deploy ReShade&apos; option to the exe context (right-click) menu..
        /// </summary>
        public static string ContextMenuDeploy_Tooltip {
            get {
                return ResourceManager.GetString("ContextMenuDeploy_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continue.
        /// </summary>
        public static string Continue {
            get {
                return ResourceManager.GetString("Continue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Game.
        /// </summary>
        public static string DeployButton {
            get {
                return ResourceManager.GetString("DeployButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploy to {0}.
        /// </summary>
        public static string DeployButton_Targeted {
            get {
                return ResourceManager.GetString("DeployButton_Targeted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure you have picked the correct Target API above first.
        ///If you are unsure, check the API section of the game&apos;s PCGamingWiki page..
        /// </summary>
        public static string DeployButton_Targeted_Tooltip {
            get {
                return ResourceManager.GetString("DeployButton_Targeted_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pick the game exe you want to deploy ReShade to.
        ///Make sure you have picked the correct Target API above first.
        ///If you are unsure, check the API section of the game&apos;s PCGamingWiki page..
        /// </summary>
        public static string DeployButton_Tooltip {
            get {
                return ResourceManager.GetString("DeployButton_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReShade was successfully deployed!.
        /// </summary>
        public static string DeploySuccess {
            get {
                return ResourceManager.GetString("DeploySuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success.
        /// </summary>
        public static string DeploySuccess_Title {
            get {
                return ResourceManager.GetString("DeploySuccess_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectX 10 or later.
        /// </summary>
        public static string DirectX10 {
            get {
                return ResourceManager.GetString("DirectX10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dxgi.dll.
        /// </summary>
        public static string DirectX10_Tooltip {
            get {
                return ResourceManager.GetString("DirectX10_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectX 9.
        /// </summary>
        public static string DirectX9 {
            get {
                return ResourceManager.GetString("DirectX9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to d3d9.dll.
        /// </summary>
        public static string DirectX9_Tooltip {
            get {
                return ResourceManager.GetString("DirectX9_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to access &apos;{0}&apos;. Please report to the developer..
        /// </summary>
        public static string DownloadError {
            get {
                return ResourceManager.GetString("DownloadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exit.
        /// </summary>
        public static string Exit {
            get {
                return ResourceManager.GetString("Exit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReShade Deployer will now download ReShade and set up the required folder structure into the current folder.
        ///
        ///This includes the Shaders and Textures folders, where you will place your shader and texture files.
        ///
        ///If you wish to keep these files elsewhere, press &apos;Exit&apos; and move the program first..
        /// </summary>
        public static string FirstTimeSetup {
            get {
                return ResourceManager.GetString("FirstTimeSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to First-Time Setup.
        /// </summary>
        public static string FirstTimeSetup_Title {
            get {
                return ResourceManager.GetString("FirstTimeSetup_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the game&apos;s runtime executable..
        /// </summary>
        public static string OpenFileDialog_Title {
            get {
                return ResourceManager.GetString("OpenFileDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OpenGL.
        /// </summary>
        public static string OpenGL {
            get {
                return ResourceManager.GetString("OpenGL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to opengl32.dll.
        /// </summary>
        public static string OpenGL_Tooltip {
            get {
                return ResourceManager.GetString("OpenGL_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReShadePreset.ini already exists.
        ///
        ///Would you like to overwrite it?.
        /// </summary>
        public static string PresetOverwrite {
            get {
                return ResourceManager.GetString("PresetOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No, keep old file.
        /// </summary>
        public static string PresetOverwrite_No {
            get {
                return ResourceManager.GetString("PresetOverwrite_No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite Preset.
        /// </summary>
        public static string PresetOverwrite_Title {
            get {
                return ResourceManager.GetString("PresetOverwrite_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes, overwrite file.
        /// </summary>
        public static string PresetOverwrite_Yes {
            get {
                return ResourceManager.GetString("PresetOverwrite_Yes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string Settings_Tooltip {
            get {
                return ResourceManager.GetString("Settings_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target API.
        /// </summary>
        public static string TargetAPI {
            get {
                return ResourceManager.GetString("TargetAPI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the rendering API that the game uses.
        ///If you are unsure, check the API section of the game&apos;s PCGamingWiki page..
        /// </summary>
        public static string TargetAPI_Tooltip {
            get {
                return ResourceManager.GetString("TargetAPI_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Globally update your ReShade DLL files to the latest version..
        /// </summary>
        public static string Update_Tooltip {
            get {
                return ResourceManager.GetString("Update_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReShade version:.
        /// </summary>
        public static string VersionPrefix {
            get {
                return ResourceManager.GetString("VersionPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vulkan.
        /// </summary>
        public static string Vulkan {
            get {
                return ResourceManager.GetString("Vulkan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you haven&apos;t already, install ReShade for Vulkan globally through the official ReShade installer. This program will setup the rest..
        /// </summary>
        public static string Vulkan_Info {
            get {
                return ResourceManager.GetString("Vulkan_Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates no DLL. Requires that you have installed ReShade for Vulkan globally through the official installer..
        /// </summary>
        public static string Vulkan_Tooltip {
            get {
                return ResourceManager.GetString("Vulkan_Tooltip", resourceCulture);
            }
        }
    }
}
